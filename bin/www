#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../server/app");
const debug = require("debug")("hemsida:server");
const http = require("http");

/**
 * Get port from environment.
 */
const PORT = normalizePort(process.env.PORT) || 3000;

/**
 * Create HTTP server.
 */
const server = http.createServer(app.callback());


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(value) {
  const port = parseInt(value, 10);
  if (isNaN(port)) {
    // named pipe
    return value;
  }
  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(err) {
  if (err.syscall !== "listen") {
    throw error;
  }

  const bind = typeof PORT === "string"
    ? "Pipe " + PORT
    : "Port " + PORT;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;

  console.log("Listening on " + bind);
}

