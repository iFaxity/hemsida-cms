(function(global){const REQUIRE_REGEX=/\srequire\("(.*?)"\)/g;const COMMENT_REGEX=/\/\*[\s\S]*?\*\/|\s\/\/.*?$/gm;const QUEUE=[];const WAITING={};const MODULES={"exports":null,"module":null,"require":null};const AMD={baseUrl:"",config:{},paths:{}};function reportError(id,reason){const err=new Error(`Require error in module '${ id }'.\nReason: '${ reason }'`);if(WAITING[id]){WAITING[id].forEach(item=>item.reject(err))}if(console&&console.error){console.error(err)}}function normalize(id,root){let path=id;if(id==="require"||id==="exports"||id==="module"||id.includes("//")){path=id}else{const paths=[];if(!id.startsWith("/")){const relative=id.startsWith("../")||id.startsWith("./");if(root&&relative){path=root+"/../"+id}else if(!relative&&AMD.baseUrl){path=AMD.baseUrl+"/"+id}}path.split("/").forEach((term,index)=>{if(term!=="."){if(index===0){paths.push(term)}else{if(paths.length>0&&term===".."){const last=paths[path.length-1];if(last!==""&&last!==".."){paths.pop()}}else if(term!==""){paths.push(term)}}}});path=paths.join("/")}return path}function makeScript(id,load){const script=document.createElement("script");let url=id+".js";if(typeof load==="function"){script.addEventListener("load",load)}script.addEventListener("error",()=>reportError(id,"The script does not exist or an error within the script prevented it from parsing."));script.type="text/javascript";script.async=true;script.src=url;document.head.appendChild(script)}function makeRequire(module){const _require=id=>require(normalize(id,module.id));_require.toUrl=id=>normalize(id,module.id);return _require}function loadModules(ids,root){if(!Array.isArray(ids)){throw new TypeError("Parameter error in loadModules")}else{return Promise.all(ids.map(id=>loadModule(id,root)))}}function loadModule(id,root){const name=normalize(id,root);return new Promise((resolve,reject)=>{if(MODULES.hasOwnProperty(name)){resolve(MODULES[name])}else{if(!WAITING[name]){let path=name;if(AMD.paths[id]){path=normalize(AMD.paths[id],root)}if(!WAITING[path]){makeScript(path,()=>{while(QUEUE.length){const module=QUEUE.pop();module.id=module.id?normalize(module.id,path):path;resolveModule(module)}});WAITING[path]=[]}WAITING[name]=[]}WAITING[name].push({resolve,reject})}})}function resolveModule(module,args){if(module.dependencies.length>0&&!args){loadModules(module.dependencies,module.id).then(args=>resolveModule(module,args))}else{if(module.dependencies&&module.dependencies.length>0){let hasExport=false;const mod={config:()=>AMD.config[module.id],exports:{}};module.dependencies.forEach((key,index)=>{if(key==="require"){args[index]=makeRequire(module)}else if(key==="exports"){hasExport=true;args[index]=mod.exports}else if(key==="module"){hasExport=true;args[index]=mod}});const value=module.factory(...args);module.exports=hasExport?mod.exports:value}else if(typeof module.factory==="object"){module.exports=module.factory}else{module.exports=module.factory()}MODULES[module.id]=module.exports;WAITING[module.id].forEach(item=>item.resolve(module.exports));return module.exports}}function define(id,dependencies,factory){if(typeof id!=="string"){factory=dependencies;dependencies=id;id=null}if(!Array.isArray(dependencies)){factory=dependencies;dependencies=[]}if(typeof factory==="function"){if(!id&&dependencies.length===0){if(factory.length<4){const arr=["require","exports","module"];for(let i=0;i<factory.length;i=i+1){const value=arr[i];if(!dependencies.includes(value)){dependencies.push(value)}}}}if(dependencies.includes("require")){factory.toString().replace(COMMENT_REGEX,"").replace(REQUIRE_REGEX,(match,name)=>dependencies.push(name))}}else if(typeof factory==="object"){if(dependencies.length>0){throw new Error("Object literals can't have dependencies!")}}else{throw new TypeError("define does not have correct parameters")}QUEUE.push({dependencies,factory,id})}function require(name,factory){if(Array.isArray(name)){loadModules(name).then(args=>factory(...args))}else if(typeof name==="string"){if(typeof factory!=="function"){if(MODULES.hasOwnProperty(name)){return MODULES[name]}else{throw new TypeError(`Can't load module '${ name }'. It's not yet defined.`)}}}else{throw new Error("Parameter error in 'require'")}}define.amd={jQuery:true};require.config=config=>{Object.keys(config).forEach(key=>{if(key in AMD){AMD[key]=config[key]}})};const mainScript=document.querySelector("script[data-main]");if(mainScript){makeScript(mainScript.dataset.main)}global.define=define;global.require=require;global.MODULES=MODULES})(window);